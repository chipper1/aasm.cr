{"name":"Aasm.cr","tagline":"Easy to use finite state machine for Crystal","body":"# aasm.cr [![Build Status](https://travis-ci.org/veelenga/aasm.cr.svg?branch=master)](https://travis-ci.org/veelenga/aasm.cr)\r\n\r\nEasy to use finite state machine for Crystal classes.\r\n\r\n## Usage\r\n\r\nAdding a state machine is as simple as including `AASM` module and overwriting `act_as_state_machine` method\r\nwhere you can start defining **states** and **events** with their **transitions**:\r\n\r\n```crystal\r\nclass Transaction\r\n  include AASM\r\n\r\n  def act_as_state_machine\r\n    aasm.state :pending, initial: true\r\n    aasm.state :active,  enter: -> { puts \"Just got activated\" }\r\n    aasm.state :completed\r\n\r\n    aasm.event :activate do |e|\r\n      e.transitions from: :pending, to: :active\r\n    end\r\n\r\n    aasm.event :complete do |e|\r\n      e.transitions from: :active, to: :completed\r\n    end\r\n  end\r\nend\r\n\r\nt = Transaction.new.tap &.act_as_state_machine\r\nt.state          #=> :pending\r\nt.next_state     #=> :active\r\nt.fire :activate # Just got activated\r\nt.state          #=> :active\r\nt.next_state     #=> :completed\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}